# coding: utf-8

"""
    WhatsApp Food Ordering System

    A food ordering system with WhatsApp integration

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.order_item_out import OrderItemOut
from typing import Optional, Set
from typing_extensions import Self

class OrderOut(BaseModel):
    """
    OrderOut
    """ # noqa: E501
    customer_name: StrictStr
    whatsapp_number: StrictStr
    id: StrictInt
    status: StrictStr
    created_at: datetime
    cancelled_at: Optional[datetime] = None
    items: List[OrderItemOut]
    __properties: ClassVar[List[str]] = ["customer_name", "whatsapp_number", "id", "status", "created_at", "cancelled_at", "items"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderOut from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        # set to None if cancelled_at (nullable) is None
        # and model_fields_set contains the field
        if self.cancelled_at is None and "cancelled_at" in self.model_fields_set:
            _dict['cancelled_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderOut from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customer_name": obj.get("customer_name"),
            "whatsapp_number": obj.get("whatsapp_number"),
            "id": obj.get("id"),
            "status": obj.get("status"),
            "created_at": obj.get("created_at"),
            "cancelled_at": obj.get("cancelled_at"),
            "items": [OrderItemOut.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None
        })
        return _obj


